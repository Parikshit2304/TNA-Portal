// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      Role     @default(EMPLOYEE)
  department String?
  position   String?
  location   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  surveyResponses SurveyResponse[]
  createdSurveys  Survey[]        @relation("CreatedBy")
  trainingApplications TrainingApplication[]
  
  @@map("users")
}

model Survey {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      SurveyStatus @default(DRAFT)
  createdById String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  createdBy User               @relation("CreatedBy", fields: [createdById], references: [id])
  questions SurveyQuestion[]
  responses SurveyResponse[]
  
  @@map("surveys")
}

model SurveyQuestion {
  id        String      @id @default(cuid())
  surveyId  String
  title     String
  type      QuestionType
  options   String?     // JSON string for multiple choice options
  required  Boolean     @default(false)
  order     Int
  
  // Relations
  survey    Survey               @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers   SurveyQuestionAnswer[]
  
  @@map("survey_questions")
}

model SurveyResponse {
  id        String   @id @default(cuid())
  surveyId  String
  userId    String
  status    ResponseStatus @default(IN_PROGRESS)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  survey    Survey                 @relation(fields: [surveyId], references: [id])
  user      User                   @relation(fields: [userId], references: [id])
  answers   SurveyQuestionAnswer[]
  
  @@unique([surveyId, userId])
  @@map("survey_responses")
}

model SurveyQuestionAnswer {
  id         String @id @default(cuid())
  responseId String
  questionId String
  answer     String
  
  // Relations
  response   SurveyResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question   SurveyQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@unique([responseId, questionId])
  @@map("survey_question_answers")
}

model TrainingProgram {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String
  duration    String?
  provider    String?
  cost        Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("training_programs")
}

model TrainingApplication {
  id                String   @id @default(cuid())
  userId            String
  applicationType   ApplicationType
  title             String
  description       String
  category          String
  priority          Priority @default(MEDIUM)
  justification     String
  expectedOutcome   String
  preferredDates    String?  // JSON string for multiple dates
  duration          String?
  budget            Float?
  participants      Int?
  location          String?
  provider          String?
  status            ApplicationStatus @default(PENDING)
  managerApproval   Boolean @default(false)
  hrApproval        Boolean @default(false)
  adminComments     String?
  submittedAt       DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User @relation(fields: [userId], references: [id])
  
  @@map("training_applications")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum SurveyStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum QuestionType {
  TEXT
  TEXTAREA
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  RATING
  DATE
}

enum ResponseStatus {
  IN_PROGRESS
  COMPLETED
}

enum ApplicationType {
  TRAINING_REQUEST
  WORKSHOP_PROPOSAL
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}